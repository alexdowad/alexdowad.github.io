---
layout: post
title: "Understanding Manger’s Padding Oracle Attack on RSA Encryption"
date:  2025-05-14
categories:
  - security
  - cryptanalysis
stylesheets:
  - katex_smaller.css
  - manger.css
---

[The previous article](/understanding-bleichenbackers-crypto98-rsa-attack/) discussed Bleichenbacher’s 1998 attack on RSA encryption, which relies on access to a PKCS#1v15 padding oracle. Just a few years later, in 2001, James Manger published details of a different padding oracle attack on RSA encryption. Manger’s attack is similar to Bleichenbacher’s attack, but relies on a different type of padding oracle. [Manger’s paper](/assets/files/manger01.pdf) is shorter and easier to read than Bleichenbacher’s, but even so, understanding the attack may be easier if you read this article first rather than jumping directly into the paper. Further, I explain some points of interest which are not mentioned in the paper.

By the way, if you aren’t familiar with Bleichenbacher’s padding oracle attack, read [the previous article](/understanding-bleichenbackers-crypto98-rsa-attack/) before this one (or before reading Manger’s research paper, for that matter).

## How does a Manger padding oracle differ from a Bleichenbacher padding oracle?

Bleichenbacher’s attack requires an oracle which tells the attacker whether any attacker-chosen ciphertext decrypts to a plaintext with valid PKCS#1v15 padding. To refresh your memory, this is what PKCS#1v15 padding looks like:

<div style="display: flex; justify-content: center;">
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 250 30" style="max-width: 45rem">
    <linearGradient id="grad1">
      <stop offset="0%" stop-color="#bff0f0" />
      <stop offset="80%" stop-color="#bff0f0" />
      <stop offset="100%" stop-color="#efffff" />
    </linearGradient>
    <!-- White background is for users whose browser is in dark mode: -->
    <rect x="5" y="5" width="185" height="20" stroke="none" fill="#fff" />
    <rect x="55" y="5" width="110" height="20" stroke="none" fill="#ffdfbf" />
    <rect x="190" y="5" width="55" height="20" stroke="none" fill="url(#grad1)" />
    <path d="M 245 5 L 5 5 L 5 25 L 245 25" stroke="black" fill="none" />
    <line x1="30" x2="30" y1="5" y2="25" stroke="black" />
    <line x1="55" x2="55" y1="5" y2="25" stroke="black" />
    <line x1="165" x2="165" y1="5" y2="25" stroke="black" />
    <line x1="190" x2="190" y1="5" y2="25" stroke="black" />
    <text x="17.5" y="15" font-size=".5rem" text-anchor="middle" dominant-baseline="middle">0x00</text>
    <text x="42.5" y="15" font-size=".5rem" text-anchor="middle" dominant-baseline="middle">0x02</text>
    <text x="110" y="15" font-size=".33rem" text-anchor="middle" dominant-baseline="middle">8 OR MORE RANDOM, NON-ZERO BYTES</text>
    <text x="177.5" y="15" font-size=".5rem" text-anchor="middle" dominant-baseline="middle">0x00</text>
    <text x="200" y="15" font-size=".5rem" text-anchor="left" dominant-baseline="middle">DATA...</text>
  </svg>
</div>

In contrast, Manger’s attack requires an oracle which tells the attacker just one thing: a Manger oracle takes any attacker-chosen ciphertext, decrypts it, and then tells the attacker **whether the first (most significant) byte is zero** or not.

It might sound like a Manger oracle is "weaker" than a Bleichenbacher oracle, in the sense of providing less information to the attacker. But in fact, a Manger oracle is much more useful to an attacker than a Bleichenbacher oracle; using a Manger oracle, one can crack RSA encryption with far fewer oracle queries. Let’s see how.

## What doesn’t change from Bleichenbacher’s attack

In Bleichenbacher’s attack, we multiply the ciphertext by some integer <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.6644em;"><span style="top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace">&nbsp;</span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace">&nbsp;</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span>, which multiplies the (unknown) plaintext <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> by <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord mathnormal">s</span><span class="mspace">&nbsp;</span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace">&nbsp;</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span>, and submit the result to the padding oracle. If it returns true, we derive some information about the value of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>; specifically, we derive a set of ranges <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8333em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.109em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3117em;"><span style="top: -2.55em; margin-left: -0.109em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span> which it might be in. The intersection of all sets <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8333em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.109em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3117em;"><span style="top: -2.55em; margin-left: -0.109em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span> gives a set <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span>, which contains all possible values of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> consistent with what the attacker knows so far. When the set <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> is narrowed down to just one value, then the encryption has been cracked.

All of this applies equally to Manger’s attack, but take note of these differences:

- With Manger’s attack, the set <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> only ever contains a single, contiguous range of integers. So the code for manipulating that set is much simpler than with Bleichenbacher’s attack.
- In Bleichenbacher’s attack, the attacker only updates <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> when the padding oracle returns true. But in Manger’s attack, *both* true and false return values from the oracle enable the attacker to narrow down the possible values of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>.<sup><a href='#footnote1' id='fnref1'>[1]</a></sup>
- Manger’s paper calls the multipliers <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span></span></span></span> instead of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>. It also uses the name <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span> for a number (of the same byte length as the RSA message size) which has 1 in the most-significant byte and 0 in all less-significant bytes; this is 256 times larger than the number which is called <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span> in Bleichenbacher’s paper.

## The three stages of Manger’s attack

When starting the attack, we assume that the first byte of the plaintext is zero. (<a href="#mangers-attack-against-non-oaep-plaintexts">More later</a> on what can be done if that’s not the case.)

In **Step 1**, we check how many high-order bits in <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> are zero. With very few oracle queries, this gives rough bounds on <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>, with an upper bound which is less than double the true value of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>.

Do it like this: Try <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">2</span></span></span></span>; that left-shifts <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> by one bit position. If the oracle returns true (meaning the high 8 bits of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">m</span><span class="mspace">&nbsp;</span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace">&nbsp;</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span> are zero), then the left-shift didn’t push a 1 bit up into the top byte, so the next bit after the top byte must be 0. In that case, try <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">4</span></span></span></span>; that left-shifts <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> by two bit positions, and tells whether the next bit in <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> is 0 or not. Continue until the oracle returns false; then you know which bit is the highest-order 1-bit in <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>.

In **Step 2**, we take advantage of our new knowledge of the highest-order 1-bit in <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>, together with our knowledge of the RSA modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span>.

With those two pieces of information, we can calculate a multiplier <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span>, larger than <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span>, with these properties: If <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> is in the highest part of its possible range, <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mord mathnormal">m</span></span></span></span> will wrap the modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span>, but *not* go so high as to reach <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.7667em; vertical-align: -0.0833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span> and make the oracle return false. But if <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> is in the lower part of its possible range, <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mord mathnormal">m</span></span></span></span> will not wrap the modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span>, and because <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span> is larger than <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span>, that high-end 1-bit will go into the top byte, and the oracle will return false. The formula is:

<span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 2.4em; vertical-align: -0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top: 0em;"><span class="delimsizing size3">⌊</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.3603em;"><span style="top: -2.314em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span><span style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span style="top: -3.677em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.686em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top: 0em;"><span class="delimsizing size3">⌋</span></span></span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.3714em;"><span style="top: -2.314em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span style="top: -3.677em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.686em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>

If the oracle returns false, chop down the upper bound on <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> accordingly, and calculate a new value of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span>, which (again) is just big enough so that values of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> in the higher part of its possible range will wrap the modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span> but not go as high as <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.7667em; vertical-align: -0.0833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span> (so the oracle will return true). And again, values of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> in the lower part of its possible range will not cause <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mord mathnormal">m</span></span></span></span> to wrap the modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span>, and the oracle will return false. Repeat until the oracle returns true.

For each iteration of this procedure, the new value of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span> is the old one plus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mord">/2</span></span></span></span>.

After Step 2, we now have a multiplier <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span> which maps <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> into the range <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span><span class="mclose">)</span></span></span></span>, meaning <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 1.3534em; vertical-align: -0.4811em;"></span><span class="mopen">[⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.8723em;"><span style="top: -2.655em;"><span class="pstrut" style="height: 3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3173em;"><span style="top: -2.357em; margin-left: -0.1076em; margin-right: 0.0714em;"><span class="pstrut" style="height: 2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.143em;"></span></span></span></span></span></span></span></span><span style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span style="top: -3.394em;"><span class="pstrut" style="height: 3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right: 0.109em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.4811em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.8723em;"><span style="top: -2.655em;"><span class="pstrut" style="height: 3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3173em;"><span style="top: -2.357em; margin-left: -0.1076em; margin-right: 0.0714em;"><span class="pstrut" style="height: 2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.143em;"></span></span></span></span></span></span></span></span><span style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span style="top: -3.394em;"><span class="pstrut" style="height: 3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right: 0.109em;">N</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right: 0.0502em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.4811em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋)</span></span></span></span>. Depending on the value of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span>, that upper bound may be around 1.005 times the lower bound. That’s a big improvement from where we were after Step 1, where the upper bound was roughly double the lower bound.

In **Step 3**, we systematically chop <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> down by around half with each successive oracle query.

In Step 1, <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mord mathnormal">m</span></span></span></span> would not wrap the modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span> at all. In Step 2, <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mord mathnormal">m</span></span></span></span> would wrap the modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span> either 0 or 1 times. But now in Step 3, we will use larger multiplier values <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span>, which will wrap the modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span> multiple times. However, we will choose <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span> so that we are sure of exactly how many times <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span> goes into <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mord mathnormal">m</span></span></span></span>.

Further, we will make <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span> just big enough so that around half of the possible values of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> will be less than <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.7667em; vertical-align: -0.0833em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span>, and the other half greater (or equal). The formulas are:

<!--
\begin{align*}

f_{approx} & = \left\lfloor \frac{2B}{\textrm{size}(M)} \right\rfloor
\\
i & = \left\lfloor \frac{f_{approx} \cdot m_{min}}{N} \right\rfloor
\\
f_3 & = \left\lceil \frac{iN}{m_{min}} \right\rceil

\end{align*}
-->

<span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 8.1001em; vertical-align: -3.8em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 4.3em;"><span style="top: -6.3em;"><span class="pstrut" style="height: 3.45em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.1514em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">pp</span><span class="mord mathnormal mtight">ro</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.2861em;"></span></span></span></span></span></span></span><span style="top: -3.6em;"><span class="pstrut" style="height: 3.45em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span><span style="top: -0.9em;"><span class="pstrut" style="height: 3.45em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 3.8em;"></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 4.3em;"><span style="top: -6.3em;"><span class="pstrut" style="height: 3.45em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top: 0em;"><span class="delimsizing size3">⌊</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.3603em;"><span style="top: -2.314em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord text"><span class="mord textrm">size</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span><span class="mclose">)</span></span></span><span style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span style="top: -3.677em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.936em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top: 0em;"><span class="delimsizing size3">⌋</span></span></span></span></span><span style="top: -3.6em;"><span class="pstrut" style="height: 3.45em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top: 0em;"><span class="delimsizing size3">⌊</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.3714em;"><span style="top: -2.314em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span><span style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span style="top: -3.677em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.1514em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">pp</span><span class="mord mathnormal mtight">ro</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.2861em;"></span></span></span></span></span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3117em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.686em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top: 0em;"><span class="delimsizing size3">⌋</span></span></span></span></span><span style="top: -0.9em;"><span class="pstrut" style="height: 3.45em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top: 0em;"><span class="delimsizing size3">⌈</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 1.3603em;"><span style="top: -2.314em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3117em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span><span style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span style="top: -3.677em;"><span class="pstrut" style="height: 3em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.836em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top: 0em;"><span class="delimsizing size3">⌉</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 3.8em;"></span></span></span></span></span></span></span></span></span></span>

Repeat Step 3 until <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> is narrowed down to a single value.

Note that there is a mistake in Step 3.5b of [Manger’s paper](/assets/files/manger01.pdf); it says to use the floor function when updating <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.5806em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.1514em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span>. That would be OK if <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.5806em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.1514em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span> was an *inclusive* bound (though the bound would not always be as tight as possible), but Step 3.1 clearly shows it’s intended to be an *exclusive* bound. For an exclusive bound, using the floor function is wrong and can cause the attack to fail.

## Comments on the three stages

Take note of why Manger’s Step 1 wouldn’t work with a Bleichenbacher oracle; since a PKCS#1v15-padded message starts with <code>0x00 0x02</code>, multiplying such a message by 2 and submitting it to a Bleichenbacher oracle would be useless. The high bytes of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">m</span></span></span></span> would be <code>0x00 0x04</code> or <code>0x00 0x05</code>, and the oracle would definitely return false. To get any information at all out of a Bleichenbacher oracle, you *must* use a multiplier big enough to make <code>0x00 0x02</code> wrap the modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span>. But because that starting multiplier is so large, only a tiny fraction of the possible values of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> will land in the target region, where the Bleichenbacher oracle has a chance of returning true. That causes the Bleichenbacher attack to use many oracle queries when searching for <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.5806em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span>.

In Manger’s Step 1, each oracle query gives 1 bit of information on the plaintext <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>. Again, in Step 3, each query gives close to 1 bit of information. So could we skip Step 2, where each query gives us much less information than that? No; Step 3 only works when the range of possible values <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> is small enough, and Step 2 narrows it down just enough for Step 3 to work.

The total number of oracle queries required for Manger’s attack is about 10% more than the number of bits in the plaintext. This is far, far less than a Bleichenbacher attack.

## A toy example of Manger’s attack

Was my description of the three stages clear enough? If not, maybe a concrete example (using unrealistically small numbers for intelligibility) will help.

Pick two 12-bit primes to start:

p = <select name="p" id="p"><option>2053</option><option>2063</option><option>2069</option><option>2081</option><option>2083</option><option>2087</option><option>2089</option><option>2099</option><option>2111</option><option>2113</option><option>2129</option><option>2131</option><option>2137</option><option>2141</option><option>2143</option><option>2153</option><option>2161</option><option>2179</option><option>2203</option><option>2207</option><option>2213</option><option>2221</option><option>2237</option><option>2239</option><option>2243</option><option>2251</option><option>2267</option><option>2269</option><option>2273</option><option>2281</option><option>2287</option><option>2293</option><option>2297</option><option>2309</option><option>2311</option><option>2333</option><option>2339</option><option>2341</option><option>2347</option><option>2351</option><option>2357</option><option>2371</option><option>2377</option><option>2381</option><option>2383</option><option>2389</option><option>2393</option><option>2399</option><option>2411</option><option>2417</option><option>2423</option><option>2437</option><option>2441</option><option>2447</option><option>2459</option><option>2467</option><option>2473</option><option>2477</option><option>2503</option><option>2521</option><option selected>2531</option><option>2539</option><option>2543</option><option>2549</option><option>2551</option><option>2557</option><option>2579</option><option>2591</option><option>2593</option><option>2609</option><option>2617</option><option>2621</option><option>2633</option><option>2647</option><option>2657</option><option>2659</option><option>2663</option><option>2671</option><option>2677</option><option>2683</option><option>2687</option><option>2689</option><option>2693</option><option>2699</option><option>2707</option><option>2711</option><option>2713</option><option>2719</option><option>2729</option><option>2731</option><option>2741</option><option>2749</option><option>2753</option><option>2767</option><option>2777</option><option>2789</option><option>2791</option><option>2797</option><option>2801</option><option>2803</option><option>2819</option><option>2833</option><option>2837</option><option>2843</option><option>2851</option><option>2857</option><option>2861</option><option>2879</option><option>2887</option><option>2897</option><option>2903</option><option>2909</option><option>2917</option><option>2927</option><option>2939</option><option>2953</option><option>2957</option><option>2963</option><option>2969</option><option>2971</option><option>2999</option><option>3001</option><option>3011</option><option>3019</option><option>3023</option><option>3037</option><option>3041</option><option>3049</option><option>3061</option><option>3067</option><option>3079</option><option>3083</option><option>3089</option><option>3109</option><option>3119</option><option>3121</option><option>3137</option><option>3163</option><option>3167</option><option>3169</option><option>3181</option><option>3187</option><option>3191</option><option>3203</option><option>3209</option><option>3217</option><option>3221</option><option>3229</option><option>3251</option><option>3253</option><option>3257</option><option>3259</option><option>3271</option><option>3299</option><option>3301</option><option>3307</option><option>3313</option><option>3319</option><option>3323</option><option>3329</option><option>3331</option><option>3343</option><option>3347</option><option>3359</option><option>3361</option><option>3371</option><option>3373</option><option>3389</option><option>3391</option><option>3407</option><option>3413</option><option>3433</option><option>3449</option><option>3457</option><option>3461</option><option>3463</option><option>3467</option><option>3469</option><option>3491</option><option>3499</option><option>3511</option><option>3517</option><option>3527</option><option>3529</option><option>3533</option><option>3539</option><option>3541</option><option>3547</option><option>3557</option><option>3559</option><option>3571</option><option>3581</option><option>3583</option><option>3593</option><option>3607</option><option>3613</option><option>3617</option><option>3623</option><option>3631</option><option>3637</option><option>3643</option><option>3659</option><option>3671</option><option>3673</option><option>3677</option><option>3691</option><option>3697</option><option>3701</option><option>3709</option><option>3719</option><option>3727</option><option>3733</option><option>3739</option><option>3761</option><option>3767</option><option>3769</option><option>3779</option><option>3793</option><option>3797</option><option>3803</option><option>3821</option><option>3823</option><option>3833</option><option>3847</option><option>3851</option><option>3853</option><option>3863</option><option>3877</option><option>3881</option><option>3889</option><option>3907</option><option>3911</option><option>3917</option><option>3919</option><option>3923</option><option>3929</option><option>3931</option><option>3943</option><option>3947</option><option>3967</option><option>3989</option><option>4001</option><option>4003</option><option>4007</option><option>4013</option><option>4019</option><option>4021</option><option>4027</option><option>4049</option><option>4051</option><option>4057</option><option>4073</option><option>4079</option><option>4091</option><option>4093</option></select><br>q = <select name="q" id="q"><option>2053</option><option>2063</option><option>2069</option><option>2081</option><option>2083</option><option>2087</option><option>2089</option><option>2099</option><option>2111</option><option>2113</option><option>2129</option><option>2131</option><option>2137</option><option>2141</option><option>2143</option><option>2153</option><option>2161</option><option>2179</option><option>2203</option><option>2207</option><option>2213</option><option>2221</option><option>2237</option><option>2239</option><option>2243</option><option>2251</option><option>2267</option><option>2269</option><option>2273</option><option>2281</option><option>2287</option><option>2293</option><option>2297</option><option>2309</option><option>2311</option><option>2333</option><option>2339</option><option>2341</option><option>2347</option><option>2351</option><option>2357</option><option>2371</option><option>2377</option><option>2381</option><option>2383</option><option>2389</option><option>2393</option><option>2399</option><option>2411</option><option>2417</option><option>2423</option><option>2437</option><option>2441</option><option>2447</option><option>2459</option><option>2467</option><option>2473</option><option>2477</option><option>2503</option><option>2521</option><option>2531</option><option>2539</option><option>2543</option><option>2549</option><option>2551</option><option>2557</option><option>2579</option><option>2591</option><option>2593</option><option>2609</option><option>2617</option><option>2621</option><option>2633</option><option>2647</option><option>2657</option><option>2659</option><option>2663</option><option>2671</option><option>2677</option><option>2683</option><option>2687</option><option>2689</option><option>2693</option><option>2699</option><option>2707</option><option>2711</option><option>2713</option><option>2719</option><option>2729</option><option>2731</option><option>2741</option><option>2749</option><option>2753</option><option>2767</option><option>2777</option><option>2789</option><option>2791</option><option>2797</option><option>2801</option><option>2803</option><option>2819</option><option>2833</option><option>2837</option><option>2843</option><option>2851</option><option>2857</option><option>2861</option><option>2879</option><option>2887</option><option>2897</option><option>2903</option><option>2909</option><option>2917</option><option>2927</option><option>2939</option><option>2953</option><option>2957</option><option>2963</option><option>2969</option><option>2971</option><option>2999</option><option>3001</option><option>3011</option><option>3019</option><option>3023</option><option>3037</option><option>3041</option><option>3049</option><option>3061</option><option>3067</option><option>3079</option><option>3083</option><option>3089</option><option>3109</option><option>3119</option><option>3121</option><option>3137</option><option>3163</option><option>3167</option><option>3169</option><option>3181</option><option>3187</option><option>3191</option><option>3203</option><option>3209</option><option>3217</option><option>3221</option><option>3229</option><option>3251</option><option>3253</option><option>3257</option><option>3259</option><option>3271</option><option>3299</option><option>3301</option><option>3307</option><option>3313</option><option>3319</option><option>3323</option><option>3329</option><option>3331</option><option>3343</option><option>3347</option><option>3359</option><option>3361</option><option>3371</option><option>3373</option><option>3389</option><option>3391</option><option>3407</option><option>3413</option><option>3433</option><option>3449</option><option>3457</option><option>3461</option><option>3463</option><option>3467</option><option>3469</option><option>3491</option><option>3499</option><option>3511</option><option>3517</option><option>3527</option><option>3529</option><option>3533</option><option>3539</option><option>3541</option><option>3547</option><option>3557</option><option>3559</option><option>3571</option><option>3581</option><option>3583</option><option>3593</option><option>3607</option><option>3613</option><option>3617</option><option>3623</option><option>3631</option><option>3637</option><option>3643</option><option>3659</option><option>3671</option><option>3673</option><option>3677</option><option selected>3691</option><option>3697</option><option>3701</option><option>3709</option><option>3719</option><option>3727</option><option>3733</option><option>3739</option><option>3761</option><option>3767</option><option>3769</option><option>3779</option><option>3793</option><option>3797</option><option>3803</option><option>3821</option><option>3823</option><option>3833</option><option>3847</option><option>3851</option><option>3853</option><option>3863</option><option>3877</option><option>3881</option><option>3889</option><option>3907</option><option>3911</option><option>3917</option><option>3919</option><option>3923</option><option>3929</option><option>3931</option><option>3943</option><option>3947</option><option>3967</option><option>3989</option><option>4001</option><option>4003</option><option>4007</option><option>4013</option><option>4019</option><option>4021</option><option>4027</option><option>4049</option><option>4051</option><option>4057</option><option>4073</option><option>4079</option><option>4091</option><option>4093</option></select>

That gives us the modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.625em; vertical-align: -0.1944em;"></span><span class="mord mathnormal" style="margin-right: 0.0359em;">pq</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord"><span id="N">9341921</span></span></span></span></span>; <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right: 0.0359em;">q</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord"><span id="totientN">9335700</span></span></span></span></span>. How would <span id="d">1990349</span> do as private exponent <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>? (If you don’t like it, suit yourself; <a href="javascript:genKeys()">click here</a> and I’ll switch it up.) That would mean the public exponent <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord"><span id="e">1111049</span></span></span></span></span>.

Now give me an 16-bit unsigned integer as message <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>: <input name="m" id="m" value="12345"/>. Encode that message in 24 bits (big-endian), and the top byte will be zero; just what we need for Manger’s attack. <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span> is 65536, and the RSA ciphertext is <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord"><span id="c">2661993</span></span></span></span></span>.

OK, now forget that you already know <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span> and <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span><span class="mclose">)</span></span></span></span>. Also forget that <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span> is so small that it could be factored in microseconds. But, fortuituously, there *is* a Manger oracle which will gladly decrypt chosen ciphertexts for you and check their leading byte. For fun, we’ll visualize the Manger oracle as a fuzzy creature named Marley.

All we know to start is <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">65536</span><span class="mclose">)</span></span></span></span>. In the 16-bit value <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>, we will call the least significant bit <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8444em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span>, and the most significant bit <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8444em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span>.

### Step 1:

Find out how many high-end bits of the 16-bit value <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> are zero.

<!--
Contents of step{1,2,3}{,summary} are pre-populated with static HTML, so people with JavaScript disabled in their browsers still have content.
If JS code is adjusted, run it and cut-and-paste generated HTML into step{1,2,3}.html
-->
{% include step1.html %}

### Step 2:

Use multipliers no greater than <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1.2533em; vertical-align: -0.4033em;"></span><span class="minner"><span class="mopen delimcenter" style="top: 0em;"><span class="delimsizing size1">⌊</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.7115em;"><span style="top: -2.655em;"><span class="pstrut" style="height: 3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right: 0.109em;">N</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right: 0.0502em;">B</span></span></span></span><span style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span style="top: -3.4101em;"><span class="pstrut" style="height: 3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.1645em;"><span style="top: -2.357em; margin-left: 0em; margin-right: 0.0714em;"><span class="pstrut" style="height: 2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.143em;"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.4033em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top: 0em;"><span class="delimsizing size1">⌋</span></span></span></span></span></span> to reduce the size of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> until <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1.1566em; vertical-align: -0.4451em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.7115em;"><span style="top: -2.655em;"><span class="pstrut" style="height: 3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3281em;"><span style="top: -2.357em; margin-left: 0em; margin-right: 0.0714em;"><span class="pstrut" style="height: 2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.143em;"></span></span></span></span></span></span></span></span><span style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span style="top: -3.4101em;"><span class="pstrut" style="height: 3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.1645em;"><span style="top: -2.357em; margin-left: 0em; margin-right: 0.0714em;"><span class="pstrut" style="height: 2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.143em;"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.4451em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 1.2173em; vertical-align: -0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.8723em;"><span style="top: -2.655em;"><span class="pstrut" style="height: 3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right: 0.109em;">N</span></span></span></span><span style="top: -3.23em;"><span class="pstrut" style="height: 3em;"></span><span class="frac-line" style="border-bottom-width: 0.04em;"></span></span><span style="top: -3.394em;"><span class="pstrut" style="height: 3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right: 0.109em;">N</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right: 0.0502em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.345em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>.

{% include step2.html %}

### Step 3:

Use larger multipliers to cut the remaining range of possibilities in half with each query.

{% include step3.html %}

<p><span id="finished"></span> If you like, try tweaking some of the above parameters and see how the resulting trace of attack steps changes.</p>

<script>
  primes = new Set([2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093]);
  attackParams = readAttackParams();

  function modularInverse(a, m) {
    let gcd, x, y;
    function extendedGCD(a, b) {
      if (b === 0) {
        gcd = a;
        x = 1;
        y = 0;
      } else {
        extendedGCD(b, a % b);
        let temp = x - Math.floor(a / b) * y;
        x = y;
        y = temp;
      }
    }
    extendedGCD(a, m);
    if (gcd !== 1) {
      return undefined; // Inverse doesn't exist if a and m are not coprime
    }
    let result = x % m;
    return result < 0 ? result + m : result; // Ensure result is positive
  }
  function modularExponentiation(base, exp, modulus) {
    if (modulus === 0)
      return 0;
    base = base % modulus;
    let result = 1;
    while (exp > 0) {
      if (exp & 1 !== 0) {
        result = (result * base) % modulus;
      }
      base = (base * base) % modulus;
      exp = exp >> 1;
    }
    return result;
  }
  function encrypt(m) {
    return modularExponentiation(m, attackParams.e, attackParams.N);
  }
  function decrypt(c) {
    return modularExponentiation(c, attackParams.d, attackParams.N);
  }

  function readAttackParams() {
    let result = {
        p: Number(document.getElementById('p').value),
        q: Number(document.getElementById('q').value),
        B: 1 << 16,
        d: Number(document.getElementById('d').innerText),
        e: Number(document.getElementById('e').innerText),
        m: Number(document.getElementById('m').value)
      };
    result.N = result.p * result.q;
    result.totientN = (result.p - 1) * (result.q - 1);
    result.c = modularExponentiation(result.m, result.e, result.N);
    return result;
  }
  function updateAttackParams() {
    attackParams = readAttackParams();
    if (primes.has(attackParams.p) && primes.has(attackParams.q)) {
      document.getElementById('N').innerText = attackParams.N;
      document.getElementById('totientN').innerText = attackParams.totientN;
      genKeys();
    }
  }
  function genKeys() {
    let e, d;
    while (!e) {
      d = Math.floor(Math.random() * attackParams.N);
      e = modularInverse(d, attackParams.totientN);
    }
    if ((d * e) % attackParams.totientN !== 1) {
      throw new Error("Bad keys!");
    }
    document.getElementById('d').innerText = d;
    document.getElementById('e').innerText = e;
    attackParams.d = d;
    attackParams.e = e;
    encryptMessage();
  }
  function encryptMessage() {
    let m = Number(document.getElementById('m').value);
    if (m >= 0 && m < 65536) {
      let c = encrypt(m);
      if (decrypt(c) !== m) {
        throw new Error("Bad encryption!");
      }
      document.getElementById('c').innerText = c;
      attackParams.m = m;
      attackParams.c = c;
      runAttack();
    }
  }

  function bSubEqValue(bitIndex, value) {
    return `<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8444em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">${bitIndex}</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">${value}</span></span></span></span>`;
  }
  function fSubEqValue(index, value) {
    return `<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">${index}</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">${value}</span></span></span></span>`;
  }
  function fSubCEqValue(index, value) {
    return `<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">${index}</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.6644em;"><span style="top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">${value}</span></span></span></span>`;
  }
  function MEqRange(low, high) {
    return `<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord">${low}</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">${high}</span><span class="mclose">)</span></span></span></span>`;
  }
  function decryptValue(value) {
    return `<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord text"><span class="mord textrm">decrypt</span></span><span class="mopen">(</span><span class="mord">${value}</span><span class="mclose">)</span></span></span></span>`;
  }
  function mEqValue(value) {
    return `<span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.6444em;"></span><span class="mord">${value}</span></span></span></span>`;
  }

  function checkBounds() {
    if (attackParams.mMin > attackParams.m)
      throw new Error("Bad lower bound!");
    if (attackParams.mMax <= attackParams.m)
      throw new Error("Bad upper bound!");
  }
  function runAttack() {
    attackParams.mMin = 0;
    attackParams.mMax = 65536;
    attackParams.steps = 0;
    runStep1();
    if (attackParams.mMax - attackParams.mMin > 1) {
      runStep2();
    } else {
      document.getElementById('step2').innerHTML = '<p>In this case, we can skip Step 2.</p>';
      document.getElementById('step2summary').innerHTML = '<b>0 oracle queries</b> used, because Step 2 was not needed.';
    }
    if (attackParams.mMax - attackParams.mMin > 1) {
      runStep3();
    } else {
      document.getElementById('step3').innerHTML = '<p>In this case, we can skip Step 3.</p>';
      document.getElementById('step3summary').innerHTML = '<b>0 oracle queries</b> used, because Step 3 was not needed.';
    }
    document.getElementById('finished').innerHTML = `The attack succeeded with <b>${attackParams.steps} oracle queries</b> in total.`;
  }
  function runStep1() {
    let transcript = "";
    let f = 2;
    let bitIndex = 15;
    while (true) {
      let multiplier = modularExponentiation(f, attackParams.e, attackParams.N);
      let modifiedC = (attackParams.c * multiplier) % attackParams.N;
      let decrypted = decrypt(modifiedC);
      let oracleResult = (decrypted < 65536);
      attackParams.steps++;
      let answer = oracleResult ? `<img src="/assets/images/yes-bubble.webp" alt="Yes!" width="110" height="75" />` : `<img src="/assets/images/no-bubble.webp" alt="No!" width="110" height="75" />`;
      if (oracleResult) {
        attackParams.mMax -= 1 << bitIndex;
      } else {
        attackParams.mMin += 1 << bitIndex;
      }
      checkBounds();
      if (bitIndex === 0) {
        transcript += `<p>With ${fSubEqValue(1, f)}, ${fSubCEqValue(1, modifiedC)}. Marley, is the top byte of ${decryptValue(modifiedC)} zero?</p><p><img src="/assets/images/marley-small.webp" alt="Marley" width="131" height="112" /> ${answer}</p><p>OK, so ${bSubEqValue(bitIndex, oracleResult ? 0 : 1)}, and ${MEqRange(attackParams.mMin, attackParams.mMax)}. We have cracked the message using Step 1 of Manger’s attack alone. This is very unusual.</p>`;
        break;
      }
      transcript += `<p>With ${fSubEqValue(1, f)}, ${fSubCEqValue(1, modifiedC)}. Marley, is the top byte of ${decryptValue(modifiedC)} zero?</p><p><img src="/assets/images/marley-small.webp" alt="Marley" width="131" height="112" /> ${answer}</p><p>OK, so ${bSubEqValue(bitIndex, oracleResult ? 0 : 1)}, and ${MEqRange(attackParams.mMin, attackParams.mMax)}. ${oracleResult ? "" : "We can move on to Step 2."}</p>`;
      if (!oracleResult)
        break;
      f *= 2;
      bitIndex--;
    }
    attackParams.f1 = f;
    document.getElementById('step1').innerHTML = transcript;
    document.getElementById('step1summary').innerHTML = `<b>${attackParams.steps} oracle queries</b> used to determine ${MEqRange(attackParams.mMin, attackParams.mMax)}. Click to see details.`;
  }
  function runStep2() {
    let transcript = "";
    let iterations = 0;
    let queries1 = attackParams.steps;
    let f = Math.floor((attackParams.N + attackParams.B) / attackParams.B) * Math.floor(attackParams.f1 / 2);

    while (true) {
      if (Number.isNaN(f)) {
        throw new Error("Invalid multiplier");
      }

      let multiplier = modularExponentiation(f, attackParams.e, attackParams.N);
      let modifiedC = (attackParams.c * multiplier) % attackParams.N;
      let decrypted = decrypt(modifiedC);
      let oracleResult = (decrypted < 65536);
      attackParams.steps++;
      let answer = oracleResult ? `<img src="/assets/images/yes-bubble.webp" alt="Yes!" width="110" height="75" />` : `<img src="/assets/images/no-bubble.webp" alt="No!" width="110" height="75" />`;

      if (!oracleResult) {
        attackParams.mMax = Math.ceil(attackParams.N / f);
      } else {
        attackParams.mMin = Math.ceil(attackParams.N / f);
      }
      checkBounds();

      if (attackParams.mMax - attackParams.mMin === 1) {
        transcript += `<p>With ${fSubEqValue(2, f)}, ${fSubCEqValue(2, modifiedC)}. Marley, is the top byte of ${decryptValue(modifiedC)} zero?</p><p><img src="/assets/images/marley-small.webp" alt="Marley" width="131" height="112" /> ${answer}</p><p>OK, so ${MEqRange(attackParams.mMin, attackParams.mMax)}. We have cracked the message using Steps 1 and 2 of Manger’s attack alone. This is very unusual.</p>`;
        break;
      }
      transcript += `<p>With ${fSubEqValue(2, f)}, ${fSubCEqValue(2, modifiedC)}. Marley, is the top byte of ${decryptValue(modifiedC)} zero?</p><p><img src="/assets/images/marley-small.webp" alt="Marley" width="131" height="112" /> ${answer}</p><p>OK, so ${MEqRange(attackParams.mMin, attackParams.mMax)}. ${oracleResult ? "We can move on to Step 3." : `Continue Step 2, with a larger value of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span>.`}</p>`;
      if (oracleResult) {
        break;
      }
      f += Math.floor(attackParams.f1 / 2);

      iterations++;
      if (iterations >= 200) {
        throw new Error("Stuck in infinite loop!");
      }
    }

    attackParams.f2 = f;
    document.getElementById('step2').innerHTML = transcript;
    document.getElementById('step2summary').innerHTML = `<b>${attackParams.steps - queries1} oracle queries</b> used to determine ${MEqRange(attackParams.mMin, attackParams.mMax)}. Click to see details.`;
  }
  function step3Multiplier() {
    function goodMultiplier(f) {
      let mfMin = attackParams.mMin * f;
      let mfMax = (attackParams.mMax-1) * f;
      let i1 = Math.floor(mfMin / attackParams.N);
      let i2 = Math.floor(mfMax / attackParams.N);
      if (i1 !== i2)
        return false; // It must be unambiguous how many times the modulus N will be wrapped when we multiply by f
      if (mfMin % attackParams.N >= attackParams.B)
        return false;
      if (mfMax % attackParams.N < attackParams.B)
        return false;
      return true;
    }

    let fApprox = Math.floor(2 * attackParams.B / (attackParams.mMax - attackParams.mMin));
    let i = Math.floor((fApprox * attackParams.mMin) / attackParams.N);
    let f = Math.ceil((i * attackParams.N) / attackParams.mMin);

    if (goodMultiplier(f)) {
      return [f, i];
    }

    let j = i;
    while (true) {
      i++;
      f = Math.ceil((i * attackParams.N) / attackParams.mMin);
      if (goodMultiplier(f)) {
        return [f, i];
      }
      if (j > 1) {
        j--;
        f = Math.ceil((j * attackParams.N) / attackParams.mMin);
        if (goodMultiplier(f)) {
          return [f, j];
        }
      }
    }
  }
  function runStep3() {
    let transcript = "";
    let iterations = 0;
    let queries12 = attackParams.steps;

    while (true) {
      let [f, i] = step3Multiplier();
      let multiplier = modularExponentiation(f, attackParams.e, attackParams.N);
      let modifiedC = (attackParams.c * multiplier) % attackParams.N;
      let decrypted = decrypt(modifiedC);
      let oracleResult = (decrypted < 65536);
      attackParams.steps++;
      let answer = oracleResult ? `<img src="/assets/images/yes-bubble.webp" alt="Yes!" width="110" height="75" />` : `<img src="/assets/images/no-bubble.webp" alt="No!" width="110" height="75" />`;

      if (oracleResult) {
        let prevMax = attackParams.mMax;
        attackParams.mMax = Math.ceil((i * attackParams.N + attackParams.B) / f);
        if (attackParams.mMax === prevMax) {
          throw new Error("Stuck in infinite loop!");
        }
      } else {
        let prevMin = attackParams.mMin;
        attackParams.mMin = Math.ceil((i * attackParams.N + attackParams.B) / f);
        if (attackParams.mMin === prevMin) {
          throw new Error("Stuck in infinite loop!");
        }
      }
      checkBounds();

      let done = (attackParams.mMax - attackParams.mMin === 1);
      transcript += `<p>With ${fSubEqValue(3, f)}, ${fSubCEqValue(3, modifiedC)}. Marley, is the top byte of ${decryptValue(modifiedC)} zero?</p><p><img src="/assets/images/marley-small.webp" alt="Marley" width="131" height="112" /> ${answer}</p><p>OK, so ${MEqRange(attackParams.mMin, attackParams.mMax)}.</p>`;
      if (done) {
        break;
      }

      iterations++;
      if (iterations >= 100) {
        throw new Error("Stuck in infinite loop!");
      }
    }
    document.getElementById('step3').innerHTML = transcript;
    document.getElementById('step3summary').innerHTML = `<b>${attackParams.steps - queries12} oracle queries</b> used to determine ${mEqValue(attackParams.mMin)}. Click to see details.`;
  }

  document.getElementById('p').addEventListener('change', updateAttackParams);
  document.getElementById('q').addEventListener('change', updateAttackParams);
  document.getElementById('m').addEventListener('change', encryptMessage);
</script>

## How Manger’s attack relates to OAEP padding

The research paper in which Manger published his attack was entitled "A Chosen Ciphertext Attack on RSA Optimal Asymmetric Encryption Padding (OAEP) as Standardized in PKCS #1 v2.0". Much of the paper talks about the OAEP padding scheme (which I’ll describe in a moment). So it may seem strange that I’ve described the entire attack without referring to OAEP yet. Here is why:

Manger’s attack really *has nothing to do with* OAEP padding. It’s a chosen-ciphertext attack which relies on being able to find out **whether the top byte of an RSA plaintext is zero** or not; no more, no less.

The connection with OAEP comes in because careless implementations of OAEP may (potentially) leak information on whether the top plaintext byte is zero. In other words, the nature of OAEP creates danger of exposing a Manger oracle to attackers. But it is certainly possible for RSA implementations *not* using OAEP to expose a Manger oracle. In fact, the authors of the paper "The 9 Lives of Bleichenbacher’s CAT" found Manger oracles in four different TLS libraries (including OpenSSL), *none* of which were using OAEP. (Rather, they were using PKCS#1v15 padding for RSA messages.)

Nonetheless, this article wouldn’t be complete without a brief overview of OAEP. Let’s do that now.

## OAEP in brief

Here’s a slightly simplified diagram. Note that the overall bit length is the same as the RSA modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span>. The symbol ⨁ represents <a href="https://en.wikipedia.org/wiki/Exclusive_or">XOR</a>.

<div style="display: flex; justify-content: center;">
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 250 45" style="max-width: 45rem">
    <linearGradient id="grad1">
      <stop offset="0%" stop-color="#bff0f0" />
      <stop offset="80%" stop-color="#bff0f0" />
      <stop offset="100%" stop-color="#efffff" />
    </linearGradient>
    <linearGradient id="grad2">
      <stop offset="0%" stop-color="#fff8dc" />
      <stop offset="90%" stop-color="#fff8dc" />
      <stop offset="100%" stop-color="#ffffff" />
    </linearGradient>
    <!-- White background is for users whose browser is in dark mode: -->
    <rect x="5" y="5" width="185" height="35" stroke="none" fill="#fff" />
    <rect x="30" y="5" width="70" height="35" stroke="none" fill="#ffdfbf" />
    <rect x="100" y="18" width="145" height="22" stroke="none" fill="url(#grad2)" />
    <rect x="170" y="5" width="75" height="13" stroke="none" fill="url(#grad1)" />
    <path d="M 245 5 L 5 5 L 5 40 L 245 40" stroke="black" fill="none" />
    <line x1="30" x2="30" y1="5" y2="40" stroke="black" />
    <line x1="100" x2="100" y1="5" y2="40" stroke="black" />
    <line x1="100" x2="245" y1="18" y2="18" stroke="#333" stroke-width=".6" />
    <line x1="145" x2="145" y1="5" y2="18" stroke="#333" stroke-width=".6" />
    <line x1="170" x2="170" y1="5" y2="18" stroke="#333" stroke-width=".6" />
    <text x="17.5" y="23" font-size=".5rem" text-anchor="middle" dominant-baseline="middle">0x00</text>
    <text x="65" y="14" font-size=".5rem" text-anchor="middle" dominant-baseline="middle">RANDOM SEED</text>
    <text x="65" y="23" font-size=".4rem" text-anchor="middle" dominant-baseline="middle">⨁</text>
    <text x="65" y="33" font-size=".5rem" text-anchor="middle" dominant-baseline="middle">SEED MASK</text>
    <text x="122" y="12.5" font-size=".4rem" text-anchor="middle" dominant-baseline="middle">0x00 BYTES</text>
    <text x="158" y="12.5" font-size=".4rem" text-anchor="middle" dominant-baseline="middle">0x01</text>
    <text x="195" y="12.5" font-size=".4rem" text-anchor="left" dominant-baseline="middle">DATA...</text>
    <text x="170" y="23" font-size=".4rem" text-anchor="middle" dominant-baseline="middle">⨁</text>
    <text x="170" y="33" font-size=".5rem" text-anchor="middle" dominant-baseline="middle">DATA MASK</text>
  </svg>
</div>

Take note of these features:

- The leading <code>0x00</code> byte ensures that the integer value of an OAEP-padded message will never be larger than the RSA modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span>.
- As with PKCS#1v15, some random bytes are included. This makes the encryption non-deterministic; if you encrypt the same data twice, then the resulting ciphertexts will be different. So attackers can’t simply compare ciphertexts to see if you are sending the same data more than once. It also defends against various other attacks, including the RSA broadcast attack featured in <a href="https://cryptopals.com/sets/5/challenges/40">Cryptopals #40</a>.
- The random seed is used to derive a "data mask" which scrambles the entire lower part of the padded message.
- The scrambled lower part is then used to derive a "seed mask" which scrambles the random seed.
- The purpose of the scrambling is to destroy <a href="https://en.wikipedia.org/wiki/Malleability_(cryptography)">RSA malleability</a>, from the perspective of the data payload which is recovered <i>after</i> reversing the OAEP padding.

Was the last point confusing? I thought so. Let me break it down:

RSA encryption is "malleable", in that you can multiply an RSA ciphertext by (for example) <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.6644em;"><span class="" style="top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span></span></span>, and the corresponding plaintext will be multiplied by 2. That property is the basis for both <a href="/understanding-bleichenbackers-crypto98-rsa-attack/">Bleichenbacher’s</a> and Manger’s attacks. Of course, the same is true of an OAEP-padded RSA ciphertext/plaintext. You can multiply an OAEP-padded ciphertext by <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.6644em;"><span class="" style="top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span></span></span>, and the OAEP-padded plaintext will be multiplied by 2. But, <i>after</i> the OAEP padding is removed, including reversing the seed mask, reversing the data mask, and pulling out the payload bytes (shown as "DATA..." in the above diagram), those payload bytes will <i>not</i> simply by multiplied by 2. They will be completely and irreversibly scrambled.

That is a big part of what OAEP padding is all about. It means that even if you create a service which (ignoring all good judgement) uses RSA encryption to protect confidential data, and even if your service carelessly exposes an oracle on the format of those "DATA..." bytes, attackers can’t mount adaptive chosen-ciphertext attacks<sup><a href='#footnote2' id='fnref2'>[2]</a></sup> against you.

The one fly in the ointment, the bruise on the apple, the hair in the soup, the ugly blotch on this otherwise rosy picture, is that RSA malleability still <i>does</i> apply to an OAEP-padded message <i>before</i> the OAEP padding is reversed. That is what makes Manger’s attack possible against RSA-OAEP, if the implementation is not careful to defend against it.

## Manger’s attack against non-OAEP plaintexts

Manger’s paper doesn’t describe how to use his attack against messages which *don’t* start with a zero byte. But it’s easy; just use the same idea as Step 1 of Bleichenbacher’s attack. Generate a random RSA blinding value <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal" style="margin-right: 0.0278em;">r</span></span></span></span>, and use it to blind the target ciphertext:

<span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.5806em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3361em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 0.7144em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.0278em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.7144em;"><span style="top: -3.113em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace">&nbsp;</span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace">&nbsp;</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span></span>

Submit that to the oracle to see whether the blinded plaintext starts with a zero byte or not. If it doesn’t, try again until you find a blinding value which works. Use Manger’s attack to decrypt the blinded ciphertext <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.5806em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3361em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span>, then remove the blinding:

<span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right: 0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right: 0.2778em;"></span></span><span class="base"><span class="strut" style="height: 1.0141em; vertical-align: -0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3361em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.0278em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height: 0.8641em;"><span style="top: -3.113em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace">&nbsp;</span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace">&nbsp;</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span></span>

Just as for Bleichenbacher’s attack, with this trick, Manger’s attack can be used to forge RSA signatures.

One more point about using Manger’s attack against non-OAEP messages; if the plaintext is a relatively small number (many high-order bytes are zero), then Step 3 sometimes gets stuck in an infinite loop. This is because when <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> is small and the range <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> is also very small, it can happen that multiplying by <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span> maps the *entire* range <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3117em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.1514em;"><span style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ma</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span><span class="mclose">)</span></span></span></span> to one side of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.7667em; vertical-align: -0.0833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span><span class="mspace" style="margin-right: 0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right: 0.2222em;"></span></span><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span>; then the oracle *always* returns the same value, regardless of where <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> actually is in that range, and Step 3 becomes unable to trim the size of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> down further. This can be avoided by validating <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.3011em;"><span style="top: -2.55em; margin-left: -0.1076em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"></span></span></span></span></span></span></span></span> and fiddling with it when necessary; another solution is to do a brute-force search of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> once it gets very small, rather than using oracle queries to run <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">M</span></span></span></span> all the way down to a single value. (This doesn’t happen with OAEP-padded messages; no wonder Manger didn’t mention it in his paper.)

## Generalizing the idea of a Manger oracle

Manger’s attack is described in terms of an oracle which reveals whether the *first byte* (8 bits) of an RSA plaintext is zero. This is because of the property of OAEP padding whereby the first byte of the plaintext is expected to be zero. But there is nothing magic about "8 bits"; if an RSA implementation exposed an oracle revealing whether the first 7 bits were zero, or whether the first 9 bits were zero, it could still be exploited with Manger’s attack. Just adjust the value of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span> accordingly; <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span> should be the smallest number with a single 1-bit in the region checked by the oracle.

If the oracle only reveals whether one bit (the most-significant bit) is zero or not, Manger’s attack needs some adjustment. Also, if the RSA modulus <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span> is unusually small, such that there is only a single bit in the region checked by the oracle which isn’t also greater than the modulus, the same problem arises. Section 3.2 of Manger’s paper briefly describes how this situation affects his attack, but doesn’t develop an adjusted algorithm in detail.

The ideas behind Manger’s attack can also be adapted to an oracle which reveals whether <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> falls in *some* interval <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span><span class="mclose">)</span></span></span></span>, where <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6833em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span></span></span></span> is not a power of 2, and is smaller than <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span><span class="mord">/2</span></span></span></span>. Actually, very little changes about the Manger attack algorithm in that case.

## Lessons?

- Really, *please* don’t use RSA encryption. Please?

<hr>

<p id='footnote1' style='font-size: 0.8em; margin-top: 2.5em'>[1] This might seem like an obvious deficiency in Bleichenbacher’s attack, but it’s not. A Bleichenbacher oracle is <i>expected</i> to return false most of the time, so there is very little marginal information gain which an attacker could possibly derive from a false return. Further, as explained in the previous article, a Bleichenbacher oracle may return false for various reasons, irrespective of whether <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.6944em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">m</span><span class="mspace">&nbsp;</span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace">&nbsp;</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span> is in the “target” range <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span><span class="mclose">)</span></span></span></span> or not. In contrast, in Manger’s attack, there is usually around a 50% chance of getting back either true or false from the padding oracle, so the attacker can derive close to one bit of information from each oracle query. And Manger oracles return true if and only if <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.8889em; vertical-align: -0.1944em;"></span><span class="mord mathnormal" style="margin-right: 0.1076em;">f</span><span class="mord mathnormal">m</span><span class="mspace">&nbsp;</span><span class="mord text"><span class="mord textrm">mod</span></span><span class="mspace">&nbsp;</span><span class="mord mathnormal" style="margin-right: 0.109em;">N</span></span></span></span> is inside the target range <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.1667em;"></span><span class="mord mathnormal" style="margin-right: 0.0502em;">B</span><span class="mclose">)</span></span></span></span>. <a href='#fnref1'>⏎</a></p>

<p id='footnote2' style='font-size: 0.8em'>[2] If you don’t know the term “adaptive chosen-ciphertext attack”, think of it as “attacks roughly like Bleichenbacher’s or Manger’s”. <a href='#fnref2'>⏎</a></p>
